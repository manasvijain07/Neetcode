Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.

 

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:

Input: nums = [1], k = 1
Output: [1]
 

Constraints:

1 <= nums.length <= 105
k is in the range [1, the number of unique elements in the array].
It is guaranteed that the answer is unique.
 

Follow up: Your algorithm's time complexity must be better than O(n log n), where n is the array's size.

-----------------------------------------------------------


Solution 1 - Using hashmap and priority queue
TC - O(n log k)
SC - O(n)

class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        int[] result = new int[k];
        
        HashMap<Integer, Integer> map = new HashMap<>();
        
        for(int i : nums)
        {
            map.put(i, map.getOrDefault(i, 0) + 1);
        }
        
        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> map.get(a) - map.get(b));
        for(int key : map.keySet())
        {
            pq.add(key);
            if(pq.size() > k)
                pq.poll();
        }
        
        for(int i = result.length - 1; i >= 0; i--)
        {
            result[i] = pq.poll();
        }
        return result;
    }
}

-----------------------------------------------

Solution 2 - Using List[] to store the list of elements that share same freq
TC - O(n)
SC - O(n)

class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        int[] result = new int[k];
        
        // map to get num and freq so that we can construct a list using map
        HashMap<Integer, Integer> map = new HashMap<>();
        int max = 0;
        
        for(int i = 0; i < nums.length; i++)
        {
            map.put(nums[i], map.getOrDefault(nums[i], 0) + 1);
            max = Math.max(map.get(nums[i]), max);
        }
        
        List<Integer>[] tempArray = new List[max + 1];
        
        for(int key: map.keySet())
        {
            if(tempArray[map.get(key)] == null)
            {
                tempArray[map.get(key)] = new ArrayList();
            }
            tempArray[map.get(key)].add(key);
        }
        
        int index = 0;
        for(int i = max; i >= 0; i--)
        {
            List<Integer> li= tempArray[i];
            if(li != null)
            {
                for(int j: li)
                {
                    if(k == 0)
                    {
                        return result; 
                    }
                    result[index++] = j;
                    k--;
                }
            }
        }
        return result;
    }
}
