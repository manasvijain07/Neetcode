Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:

Each row must contain the digits 1-9 without repetition.
Each column must contain the digits 1-9 without repetition.
Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.
Note:

A Sudoku board (partially filled) could be valid but is not necessarily solvable.
Only the filled cells need to be validated according to the mentioned rules.
 

Example 1:


Input: board = 
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: true

---------------------------------

Solution 1 - Brute force
for every row, col and box we check for duplicates but using 3 different sets
TC - O(n)
SC - O(n)

---------------------------------

Solution 2 - Using 1 set to store check for row, col and box

class Solution {
    public boolean isValidSudoku(char[][] board) {
        if(board == null || board.length < 9 || board[0].length < 9)
            return false;
        
        HashSet<String> set = new HashSet<>();
        
        for(int row = 0; row < 9; row++)
        {
            for(int col = 0; col < 9; col++)
            {
                char c = board[row][col];
                if(c != '.')
                {
                    if(!set.add(c + "is in row "+ row) ||
                       !set.add(c + "is in col" + col) ||
                       !set.add(c + "is in box" + row/3 + "-" + col/3))
                       {
                           return false;
                       }
                    }
                }
            }
        return true; 
    }
}
