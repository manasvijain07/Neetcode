Given an integer array nums of unique elements, return all possible subsets (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
Example 2:

Input: nums = [0]
Output: [[],[0]]
 

Constraints:

1 <= nums.length <= 10
-10 <= nums[i] <= 10
All the numbers of nums are unique.

-----------------------------------------

Video - https://www.youtube.com/watch?v=kYY9DotIKlo&t=597s

Solution 1 - TC - O(n. 2 ^ n)
SC - O(n . 2 ^ n)

class Solution {
        
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        result.add(new ArrayList<>());
        
        for(int i = 0; i < nums.length; i++)
        {
            int size = result.size();
            for(int j = 0; j < size; j++)
            {
                List<Integer> list = new ArrayList<>(result.get(j));
                list.add(nums[i]);
                result.add(list);
            }
        }
        return result;
    }
}

-----------------------------------

Solution 2 - Backtracking
TC - O(n * 2^n)
SC - O(n)

class Solution {
    List<List<Integer>> result;
    public List<List<Integer>> subsets(int[] nums) {
        result = new ArrayList<>();
        helper(nums, 0, new ArrayList<>());
        return result;
    }
    
    public void helper(int[] nums, int index, List<Integer> path)
    {
        result.add(new ArrayList<>(path));    
        
        for(int i = index; i < nums.length; i++)
        {
            path.add(nums[i]);
            helper(nums, i + 1, path);
            path.remove(path.size() - 1);
        }
    }
}
