Given two strings s and t, return true if t is an anagram of s, and false otherwise.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

 

Example 1:

Input: s = "anagram", t = "nagaram"
Output: true
Example 2:

Input: s = "rat", t = "car"
Output: false
 

Constraints:

1 <= s.length, t.length <= 5 * 104
s and t consist of lowercase English letters.
 

Follow up: What if the inputs contain Unicode characters? How would you adapt your solution to such a case?

------------------------------------------------------

Solution 1 - Sorting
TC - O(n log n)
SC - O(n)

class Solution {
    public boolean isAnagram(String s, String t) {
        if(s == null && t == null)
            return true;
        if(s == null || t == null || s.length() != t.length())
            return false;
        
        char[] a = s.toCharArray();
        char[] b = t.toCharArray();
        Arrays.sort(a);
        Arrays.sort(b);
        
        for(int i = 0; i < s.length(); i++)
        {
            if(a[i] != b[i])
                return false;
        }
        return true;
    }
}

-----------------------------------------

Solution 2 - HashMap
TC - O(n)
SC - O(n)

class Solution {
    public boolean isAnagram(String s, String t) {
        HashMap<Character, Integer> map = new HashMap<>();
        for(char c: s.toCharArray())
        {
            map.put(c, map.getOrDefault(c, 0) + 1);
        }
        
        for(int i = 0; i < t.length(); i++)
        {
            if(!map.containsKey(t.charAt(i)))
                return false;
            else
            {
                map.put(t.charAt(i), map.get(t.charAt(i)) - 1);
                if(map.get(t.charAt(i)) < 0)
                    return false;
                if(map.get(t.charAt(i)) == 0)
                    map.remove(t.charAt(i));
            }
        }
        return map.isEmpty();
    }
}
