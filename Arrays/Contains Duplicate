Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.

 

Example 1:

Input: nums = [1,2,3,1]
Output: true
Example 2:

Input: nums = [1,2,3,4]
Output: false
Example 3:

Input: nums = [1,1,1,3,3,4,3,2,4,2]
Output: true
 

Constraints:

1 <= nums.length <= 105
-109 <= nums[i] <= 109

-----------------------------------------------------
Solution 1 - Brute force
TC - O(n ^ 2)
SC - O(1)

class Solution {
    public boolean containsDuplicate(int[] nums) {
        if(nums == null || nums.length <= 1)
            return false;
        
        for(int i = 0; i < nums.length - 1; i++)
        {
            for(int j = i + 1; j < nums.length; j++)
            {
                if(nums[i] == nums[j])
                    return true;
            }
        }
        return false;
    }
}

-----------------------------------------------------

Solution 2 - Sorting
TC - O(n log n)
SC - O(n)

class Solution {
    public boolean containsDuplicate(int[] nums) {
        if(nums == null || nums.length <= 1)
            return false;
        
        Arrays.sort(nums);
        
        for(int i = 1; i < nums.length; i++)
        {
            if(nums[i] == nums[i - 1])
                return true;
        }
        return false;
    }
}

-------------------------------------------------

Solution 3 - Using hashmap
TC - O(n)
SC - O(n)

class Solution {
    public boolean containsDuplicate(int[] nums) {
        if(nums == null || nums.length <= 1)
            return false;
        
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i: nums)
        {
            map.put(i, map.getOrDefault(i, 0) + 1);
        }
        
        for(int key: map.keySet())
        {
            if(map.get(key) > 1)
                return true;
        }
        return false;
    }
}

-------------------------------------------------

Solution 4 - Set
TC - O(n)
SC - O(n)

class Solution {
    public boolean containsDuplicate(int[] nums) {
        if(nums == null || nums.length <= 1)
            return false;
        
        HashSet<Integer> set = new HashSet<>();
        
        for(int i : nums)
        {
            if(set.contains(i))
                return true;
            set.add(i);
        }
        return false;
    }
}
