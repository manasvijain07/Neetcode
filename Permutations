Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
Example 2:

Input: nums = [0,1]
Output: [[0,1],[1,0]]
Example 3:

Input: nums = [1]
Output: [[1]]
 

Constraints:

1 <= nums.length <= 6
-10 <= nums[i] <= 10
All the integers of nums are unique.

------------------------------

Solution 1 - 
TC - O(2^n)
SC - O(n)


class Solution {
    List<List<Integer>> result;
    public List<List<Integer>> permute(int[] nums) {
        result = new ArrayList<>();
        
        helper(nums, new ArrayList<>());
        return result;
    }
    
    public void helper(int[] nums, List<Integer> path)
    {
        if(path.size() == nums.length)
        {
            result.add(new ArrayList<>(path));
            return;
        }
        for(int i = 0; i < nums.length; i++)
        {
            if(path.contains(nums[i])) continue;
            path.add(nums[i]);
            helper(nums, path);
            path.remove(path.size() - 1);
        }
    }
}
