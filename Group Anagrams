Given an array of strings strs, group the anagrams together. You can return the answer in any order.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

 

Example 1:

Input: strs = ["eat","tea","tan","ate","nat","bat"]
Output: [["bat"],["nat","tan"],["ate","eat","tea"]]
Example 2:

Input: strs = [""]
Output: [[""]]
Example 3:

Input: strs = ["a"]
Output: [["a"]]
 

Constraints:

1 <= strs.length <= 104
0 <= strs[i].length <= 100
strs[i] consists of lowercase English letters.

--------------------------------------------------


Solution 1 - 
Time Complexity: O(NKlogK), where N is the length of strs, and K is the maximum length of a string in strs. 
The outer loop has complexity O(N) as we iterate through each string. Then, we sort each string in O(KlogK) time.
Space Complexity: O(NK), the total information content stored in ans.

class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        List<List<String>> result = new ArrayList<>();
        
        if(strs == null || strs.length == 0)
            return result;
        
        HashMap<String, List<String>> map = new HashMap<>();
        List<String> newlist;
        
        for(int i = 0; i < strs.length; i++)
        {
            String s = strs[i];
            char[] strschar = strs[i].toCharArray();
            Arrays.sort(strschar);
            
            String newString = new String(strschar);
            
            if(!map.containsKey(newString))
            {
                map.put(newString, new ArrayList<>());
            }
           
            map.get(newString).add(s);
        }
        
        for(String key: map.keySet())
        {
            result.add(map.get(key));
        }
        return result; 
    }
}

----------------------------------------------------

Solution 2 - 
TC - O(n)
SC - O(n)

class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        List<List<String>> result = new ArrayList<>();
        
        // base condition
        if(strs == null || strs.length == 0)
            return result;
        
        // logic
        
        HashMap<HashMap<Character, Integer>, List<String>> map = new HashMap<>();
        
        for(String s : strs)
        {
            // generate my values for map
            HashMap<Character, Integer> charMap = new HashMap<>();
            for(char c: s.toCharArray())
            {
                charMap.put(c, charMap.getOrDefault(c, 0) + 1);
            }
            
            if(!map.containsKey(charMap))
            {
                map.put(charMap, new ArrayList<>());
            }
            map.get(charMap).add(s);
        }
        
        // forming my result set
        for(HashMap<Character, Integer> key: map.keySet())
        {
            result.add(map.get(key));
        }
        
        return result;
        
    }
}
