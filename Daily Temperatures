Given an array of integers temperatures represents the daily temperatures, return an array answer such that answer[i] is the number of days you have to wait after the ith day to get a warmer temperature. If there is no future day for which this is possible, keep answer[i] == 0 instead.

 

Example 1:

Input: temperatures = [73,74,75,71,69,72,76,73]
Output: [1,1,4,2,1,1,0,0]
Example 2:

Input: temperatures = [30,40,50,60]
Output: [1,1,1,0]
Example 3:

Input: temperatures = [30,60,90]
Output: [1,1,0]
 

Constraints:

1 <= temperatures.length <= 105
30 <= temperatures[i] <= 100

-----------------------------------

Solution 1 - Brute force
TC - O(n ^ 2)
SC - O(1)

class Solution {
    public int[] dailyTemperatures(int[] temperatures) {
        int n = temperatures.length;
        int[] result = new int[n];
        
        for(int i = 0; i < n; i++)
        {
            int count = 0;
            for(int j = i + 1; j < n; j++)
            {
                count++;
                if(temperatures[j] > temperatures[i])
                {
                    result[i] = count;
                    break;
                }
            }
        }
        return result;
    }
}

------------------------------------------

Solution 2 - Stacks

TC - O(n)
SC - O(n)

class Solution {
    public int[] dailyTemperatures(int[] temperatures) {
        int n = temperatures.length;
        int[] result = new int[n];
        
        Stack<Integer> stack = new Stack<>();
        
        for(int i = n - 1; i >= 0; i--)
        {
            while(!stack.isEmpty() && temperatures[i] >= temperatures[stack.peek()])
            {
                stack.pop();
            }
            result[i] = stack.isEmpty() ? 0 : stack.peek() - i;
            
            stack.push(i);
        }
        return result;
    }
}
