Given the root of a binary tree, return its maximum depth.

A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

 

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: 3
Example 2:

Input: root = [1,null,2]
Output: 2
 

Constraints:

The number of nodes in the tree is in the range [0, 104].
-100 <= Node.val <= 100

---------------------------------------

Solution 1 - using dfs Recursive
TC - O(n)
SC - O(height) and in worst case it can be O(n)

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int maxDepth(TreeNode root) {
        if(root == null)
            return 0;
        
        return Math.max(maxDepth(root.left), maxDepth(root.right)) + 1;
    }
}

----------------------------------------

Solution 2 - BFS using queue Iterative
TC - O(n)
SC - O(n)


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int maxDepth(TreeNode root) {
        int level = 0;
        if(root == null)
            return level;
        
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        
        while(!queue.isEmpty())
        {
            int size = queue.size();
            
            for(int i = 0; i < size; i++)
            {
                TreeNode temp = queue.poll();
            
                if(temp.left != null)
                    queue.add(temp.left);
                if(temp.right != null)
                    queue.add(temp.right);
            }
            level++;
        }
        return level;
    }
}

--------------------------------------

Solution 3 - DFS iterative
TC - O(n)
SC - O(n)


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    class Node
    {
        TreeNode node;
        int depth;
        
        public Node(TreeNode node, int depth)
        {
            this.node = node;
            this.depth = depth;
        }
    }
    public int maxDepth(TreeNode root) {
        int result = 0;
        if(root == null)
            return result;
        
        Stack<Node> stack = new Stack<>();
        Node newnode = new Node(root, 0); 
        stack.push(newnode);
        
        while(!stack.isEmpty())
        {
            Node temp = stack.pop();
            if(temp.node.left != null)
                stack.push(new Node(temp.node.left, temp.depth + 1));
            if(temp.node.right != null)
                stack.push(new Node(temp.node.right, temp.depth + 1));
            result = Math.max(result, temp.depth);
        }
        return result + 1;
    }
}
