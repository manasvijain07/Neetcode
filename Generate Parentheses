Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

 

Example 1:

Input: n = 3
Output: ["((()))","(()())","(())()","()(())","()()()"]
Example 2:

Input: n = 1
Output: ["()"]
 

Constraints:

1 <= n <= 8


-------------------------------------------

Solution 1 - Backtracking
TC - O(4^n/(n^ (1/2)))
SC - O(4^n/(n^ (1/2)))

class Solution {
    List<String> result;
    public List<String> generateParenthesis(int n) {
        result = new ArrayList<>();
        helper(n, 0, 0, new StringBuffer());
        return result;
    }
    
    public void helper(int n, int open, int close, StringBuffer path)
    {
        if(open == n && close == n)
        {
            result.add(path.toString());
            return;
        }
        
        if(open < n)
        {
            path.append("(");
            helper(n, open + 1, close, path);
            path.deleteCharAt(path.length() - 1);
        }
        
        if(open > close)
        {
            path.append(")");
            helper(n, open, close + 1, path);
            path.deleteCharAt(path.length() - 1);
        }
    }
}
