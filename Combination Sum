


Solution 1 - Backtracking - 
TC - O(2 ^ (m * n)) where m = candidates.lenth, n = target
SC - O(m * n)

class Solution {
    List<List<Integer>> result;
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        result = new ArrayList<>();
        
        if(candidates == null || candidates.length == 0)
        {
            return result;
        }
        
        helper(candidates, target, 0 , new ArrayList<>());
        return result;
    }
    
    public void helper(int[] candidates, int target, int index, List<Integer> path)
    {
        //base case
        if(target == 0)
        {
            result.add(new ArrayList<>(path));
            return;
        }
        
        if(target < 0 || index == candidates.length)
            return;
        
        // choose
        path.add(candidates[index]);
        helper(candidates, target - candidates[index], index, path);
        path.remove(path.size() - 1);
        
        // not choose
        helper(candidates, target, index + 1, path);
        return;
    }
}

Solution 2 - for loop based
TC - O(2^(m * n))
SC - O(m * n)

class Solution {
    List<List<Integer>> result;
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        result = new ArrayList<>();
        helper(candidates, target, 0, new ArrayList<>());
        return result;
    }
    
    public void helper(int[] candidates, int target, int index, List<Integer> path)
    {
        // base case
        if(target == 0)
        {
            result.add(new ArrayList<>(path));
            return;
        }
        
        if(target < 0 || index == candidates.length)
        {
            return;
        }
        
        
        for(int i = index; i < candidates.length; i++)
        {
            if(target >= candidates[i])
            {
                path.add(candidates[i]);
                helper(candidates, target - candidates[i], i , path);
                path.remove(path.size() - 1);
            }
        }
    }
}
